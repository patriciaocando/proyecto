{"remainingRequest":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/components/SearchComponent.vue?vue&type=template&id=026edbb5&scoped=true&","dependencies":[{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/components/SearchComponent.vue","mtime":1599073312935},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VhcmNoQ29udGVudCIgfSwgWwogICAgX2MoImlucHV0IiwgewogICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgewogICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgIHZhbHVlOiBfdm0uc2VhcmNoLAogICAgICAgICAgZXhwcmVzc2lvbjogInNlYXJjaCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgIGF0dHJzOiB7CiAgICAgICAgaWQ6ICJTZWFyY2giLAogICAgICAgIG5hbWU6ICJTZWFyY2giLAogICAgICAgIHR5cGU6ICJzZWFyY2giLAogICAgICAgIGF1dG9jb21wbGV0ZTogIm9mZiIsCiAgICAgICAgcGxhY2Vob2xkZXI6CiAgICAgICAgICAiQnVzY2EgcG9yIHBhbGFicmFzIGNsYXZlLCBhdXRvciwgbGVuZ3VhamUsIG5vbWJyZSBkZSB1c3VhcmlvIgogICAgICB9LAogICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnNlYXJjaCB9LAogICAgICBvbjogewogICAgICAgIG5ld1NlYXJjaDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gX3ZtLmVyZWFzZUZpbHRlcnMoKQogICAgICAgIH0sCiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgX3ZtLnNob3dFcnJvciA9IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICB9CiAgICAgICAgICBfdm0uc2VhcmNoID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgIH0KICAgICAgfQogICAgfSksCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgIHZhbHVlOiBfdm0uZmlsdGVyLAogICAgICAgICAgICBleHByZXNzaW9uOiAiZmlsdGVyIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgc3RhdGljQ2xhc3M6ICJmaWx0ZXJDb250ZW50IgogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaXJzdExpbmVGaWx0ZXIiIH0sIFsKICAgICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiYXZpYWJsZUxhbmd1YWdlcyIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiTGVuZ3VhamVzOiIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxhbmd1YWdlLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibGFuZ3VhZ2UiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImF2aWFibGVMYW5ndWFnZXMiLCBuYW1lOiAiYXZpYWJsZUxhbmd1YWdlcyIgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF92bS5sYW5ndWFnZSA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF92bS5fbChfdm0ubGFuZ3VhZ2VzLCBmdW5jdGlvbihsYW5ndWFnZSkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJvcHRpb24iLAogICAgICAgICAgICAgICAgeyBrZXk6IGxhbmd1YWdlLmlkLCBkb21Qcm9wczogeyB2YWx1ZTogbGFuZ3VhZ2UubGFuZ3VhZ2UgfSB9LAogICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MobGFuZ3VhZ2UubGFuZ3VhZ2UpKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICAwCiAgICAgICAgICApLAogICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJhdXRvciIgfSB9LCBbX3ZtLl92KCJBdXRvcjoiKV0pLAogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uYXV0b3IsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiYXV0b3IiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGlkOiAiYXV0b3IiLCBuYW1lOiAiYXV0b3IiIH0sCiAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uYXV0b3IgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfdm0uYXV0b3IgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZGF0ZUNvbnRlbnQiIH0sIFsKICAgICAgICAgIF9jKCJsYWJlbCIsIFtfdm0uX3YoIkRlc2RlOiIpXSksCiAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5kYXRlSW5pdCwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkYXRlSW5pdCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJkYXRlIiwgaWQ6ICJkYXRlSW5pIiB9LAogICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmRhdGVJbml0IH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX3ZtLmRhdGVJbml0ID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygibGFiZWwiLCBbX3ZtLl92KCJIYXN0YToiKV0pLAogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZGF0ZUVuZCwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkYXRlRW5kIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImRhdGUiLCBpZDogImRhdGVFbmQiIH0sCiAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZGF0ZUVuZCB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF92bS5kYXRlRW5kID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm9yZGVyQ29udGVudCIgfSwgWwogICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJkaXJlY3Rpb24iIH0gfSwgW192bS5fdigiT3JkZW5hcjoiKV0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzZWxlY3QiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ub3JkZXIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJvcmRlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZGlyZWN0aW9uIiwgbmFtZTogImRpcmVjdGlvbiIgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF92bS5vcmRlciA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygib3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogIkRFU0MiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJEZXNjZW5kZW50ZSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJBU0MiIH0gfSwgW192bS5fdigiQXNjZW5kZW50ZSIpXSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJhbnN3ZXJlZCIsIGF0dHJzOiB7IGZvcjogImFuc3dlcmVkIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgUmVzcG9uZGlkYXM6IFNJICIpLAogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc3RhdHVzLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic3RhdHVzIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJjaGVja2JveCIsCiAgICAgICAgICAgICAgICBpZDogImFuc3dlcmVkIiwKICAgICAgICAgICAgICAgIG5hbWU6ICJhbnN3ZXJlZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogImNoZWNrIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsKICAgICAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLnN0YXR1cykKICAgICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLnN0YXR1cywgImNoZWNrIikgPiAtMQogICAgICAgICAgICAgICAgICA6IF92bS5zdGF0dXMKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICB2YXIgJCRhID0gX3ZtLnN0YXR1cywKICAgICAgICAgICAgICAgICAgICAkJGVsID0gJGV2ZW50LnRhcmdldCwKICAgICAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2UKICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoJCRhKSkgewogICAgICAgICAgICAgICAgICAgIHZhciAkJHYgPSAiY2hlY2siLAogICAgICAgICAgICAgICAgICAgICAgJCRpID0gX3ZtLl9pKCQkYSwgJCR2KQogICAgICAgICAgICAgICAgICAgIGlmICgkJGVsLmNoZWNrZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICQkaSA8IDAgJiYgKF92bS5zdGF0dXMgPSAkJGEuY29uY2F0KFskJHZdKSkKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiYKICAgICAgICAgICAgICAgICAgICAgICAgKF92bS5zdGF0dXMgPSAkJGEKICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgJCRpKQogICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLnN0YXR1cyA9ICQkYwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic2xpZGVyIHJvdW5kIiB9KQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdCiAgICApLAogICAgX2MoCiAgICAgICJwIiwKICAgICAgewogICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgdmFsdWU6IF92bS5zaG93RXJyb3IsCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJzaG93RXJyb3IiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBzdGF0aWNDbGFzczogImVycm9yVHh0IgogICAgICB9LAogICAgICBbX3ZtLl92KF92bS5fcyhfdm0uZXJyb3JNZXNzYWdlKSldCiAgICApLAogICAgX2MoCiAgICAgICJidXR0b24iLAogICAgICB7CiAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgewogICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICB2YWx1ZTogX3ZtLmZpbHRlciwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImZpbHRlciIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgIGF0dHJzOiB7IGlkOiAiYnV0dG9uMyIgfSwKICAgICAgICBvbjogewogICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICByZXR1cm4gX3ZtLmVyZWFzZUZpbHRlcnMoKQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgW192bS5fdigiTElNUElBUiBGSUxUUk9TIildCiAgICApLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWFyY2hCdXR0b25zIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJidXR0b24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FuY2VsQnV0dG9uIiwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX3ZtLm5ld1NlYXJjaCgpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkJPUlJBUiBCw5pTUVVFREEiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgewogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uc2VuZFNlYXJjaFBhcmFtcygpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkJVU0NBUiIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogImJ1dHRvbjIiIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaG93RmlsdGVyKCkKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiRklMVFJPUyIpXQogICAgICApCiAgICBdKSwKICAgIF9jKAogICAgICAic3BhbiIsCiAgICAgIHsKICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgIHZhbHVlOiBfdm0ubmV3U2VhcmNoVmlldywKICAgICAgICAgICAgZXhwcmVzc2lvbjogIm5ld1NlYXJjaFZpZXciCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBzdGF0aWNDbGFzczogImVycm9yQ29udGFpbmVyIgogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhfdm0ucmVzcG9uc2UpKV0pLAogICAgICAgIF9jKAogICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiYnV0dG9uMiIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm5ld1NlYXJjaCgpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUkVBTElaQVIgTlVFVkEgQsOaU1FVRURBIildCiAgICAgICAgKQogICAgICBdCiAgICApCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}