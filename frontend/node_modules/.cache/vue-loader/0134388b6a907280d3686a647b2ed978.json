{"remainingRequest":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/NewQuestion.vue?vue&type=style&index=0&id=b4250348&scoped=true&lang=css&","dependencies":[{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/NewQuestion.vue","mtime":1598269210538},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRhaW5lciB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKI3NlbGVjdGVkTGFuZ3VhZ2UgewogIG1hcmdpbi1ib3R0b206IDFyZW07Cn0KLm5ld1F1ZXN0aW9uQ29udGFpbmVyIHsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxpZ3RoQ29sb3IpOwogIHBhZGRpbmc6IDJyZW07CiAgYm9yZGVyLXJhZGl1czogMC41cmVtOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBqdXN0aWZ5LWNvbnRlbnQ6IHN0cmV0Y2g7Cn0KI2F2aWFibGVMYW5ndWFnZXMgewogIHdpZHRoOiAzMCU7CiAgbWFyZ2luLWJvdHRvbTogMC41cmVtOwp9CgouYnV0dG9uc0NvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOwp9CgpAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMDBweCkgewogIC5idXR0b25zQ29udGFpbmVyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOwogICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOwogIH0KfQo="},{"version":3,"sources":["NewQuestion.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NewQuestion.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <span id=\"sectionTitle\">\n      <h1>Nueva pregunta</h1>\n      <h2>Escoge el lenguaje de programacion y escribe tu pregunta</h2>\n    </span>\n\n    <div class=\"newQuestionContainer\">\n      <h3>TITULO:</h3>\n      <input\n        class=\"titleInput\"\n        type=\"text\"\n        placeholder=\"Escribe el título de tu pregunta\"\n        v-model=\"title\"\n      />\n\n      <h3>LENGUAJE:</h3>\n      <select id=\"aviableLanguages\" v-model=\"languageQuestion\">\n        <option>Selecciona un lenguaje:</option>\n        <option\n          v-for=\"language in languages\"\n          :key=\"language.id\"\n          :value=\"language.name_language\"\n        >{{language.name_language}}</option>\n      </select>\n\n      <p\n        id=\"selectedLanguage\"\n        v-if=\"languageQuestion !== ''\"\n        :class=\"'languageStyle ' + languageQuestion.toLowerCase()\"\n      >{{ languageQuestion }}</p>\n      <h3>Escribe tu pregunta:</h3>\n      <textarea name=\"textQuestion\" rows=\"4\" placeholder=\"Haz tu pregunta\" v-model=\"content\"></textarea>\n      <p v-show=\"showError\">{{ errorMessage }}</p>\n      <span class=\"buttonsContainer\">\n        <button @click=\"postQuestion()\">Publicar</button>\n        <button class=\"cancelButton\" @click=\"cancelQuestion()\">Cancelar</button>\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\nimport { getAuthToken, getIdToken, ENDPOINT } from \"../utils/helpers\";\n\nexport default {\n  name: \"NewQuestion\",\n  data() {\n    return {\n      //variables de vista\n      title: \"\",\n      content: \"\",\n      languageQuestion: \"\",\n      //variables de gestion de errores\n      showError: false,\n      errorMessage: \"\",\n      //variales de componentes\n      languages: [],\n      //TOKEN\n      token: getAuthToken(),\n    };\n  },\n  methods: {\n    //TRAER LOS LENGUAJES DE LA BBDD\n    async getLanguages() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/languages\");\n        this.languages = response.data.data;\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error.response.data.message;\n      }\n    },\n\n    //PUBLICAR LA RESPUESTA\n    async postQuestion() {\n      //RECOJO LOS DATOS PARA ENVIAR EN EL BODY\n      let data = {\n        title: this.title,\n        content: this.content,\n        language: this.languageQuestion,\n      };\n\n      //CONFIGURO EL OBJETO DE CONFIGURACION\n      let config = {\n        headers: {\n          Authorization: getAuthToken(),\n        },\n      };\n      //COMPRUEBO QUE LOS DATOS NO ESTEN VACIOS\n      if (data.title === \"\" || data.content === \"\" || data.language === \"\") {\n        alertFunction(\n          \"warning\",\n          \"Campos Vacíos\",\n          \"Debes llenar todos los campos para publicar tu pregunta\"\n        );\n      } else {\n        try {\n          const response = await axios.post(\n            ENDPOINT + \"/new-question\",\n            data,\n            config\n          );\n          //ALERT DE CREACION DE PREGUNTA\n          alertFunction(\n            \"succes\",\n            \"Pregunta publicada\",\n            \"Se ha publicado tu pregunta exitosamente.\"\n          );\n          this.$router.push(\"/mis-preguntas\");\n        } catch (error) {\n          this.showError = true;\n          this.errorMessage = error.response.data.message;\n        }\n      }\n    },\n    cancelQuestion() {\n      Swal.fire({\n        title: \"¿Estás seguro?\",\n        text: \"¿Quieres cancelar esta pregunta?\",\n        icon: \"question\",\n        showCancelButton: true,\n        confirmButtonColor: \"var(--blue)\",\n        cancelButtonColor: \"var(--red)\",\n        confirmButtonText: \"Si, Cancelar\",\n      }).then((result) => {\n        if (result.value) {\n          this.title = \"\";\n          this.content = \"\";\n          this.languageQuestion = \"\";\n          Swal.fire(\"¡Cancelada!\", \"TU pregunta ha sido cancelada\", \"success\");\n          this.$router.push({ name: \"Dashboard\" });\n        } else {\n          this.title = this.title;\n          this.content = this.content;\n          this.language = this.languageQuestion;\n        }\n      });\n    },\n  },\n  created() {\n    this.getLanguages();\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  text-align: left;\n}\n\n#selectedLanguage {\n  margin-bottom: 1rem;\n}\n.newQuestionContainer {\n  text-align: left;\n  background-color: var(--ligthColor);\n  padding: 2rem;\n  border-radius: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n}\n#aviableLanguages {\n  width: 30%;\n  margin-bottom: 0.5rem;\n}\n\n.buttonsContainer {\n  display: flex;\n  justify-content: flex-end;\n}\n\n@media only screen and (min-width: 1200px) {\n  .buttonsContainer {\n    display: flex;\n    justify-content: flex-end;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-end;\n  }\n}\n</style>"]}]}