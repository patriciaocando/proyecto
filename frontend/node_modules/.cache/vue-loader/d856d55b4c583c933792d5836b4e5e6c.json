{"remainingRequest":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/UserQuestions.vue?vue&type=style&index=0&id=bea3be10&scoped=true&lang=css&","dependencies":[{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/UserQuestions.vue","mtime":1599077919534},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKKiB7CiAgdGV4dC1hbGlnbjogbGVmdDsKICBtYXJnaW4tYm90dG9tOiAxcmVtOwp9Cg=="},{"version":3,"sources":["UserQuestions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmJA;AACA;AACA;AACA","file":"UserQuestions.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <span id=\"sectionTitle\">\n      <h1>Tus preguntas</h1>\n      <h2>Aquí puedes ver las preguntas que has realizado</h2>\n    </span>\n\n    <getquestions\n      id=\"questionsBody\"\n      :questions=\"questions\"\n      :answers=\"answers\"\n      @showAnswers=\"getAnswersById\"\n      @rateAnswer=\"rateAnswer\"\n      @editquestion=\"getQuestionData\"\n      @questionDeleted=\"questionDeleted\"\n      @questionEdited=\"questionEdited\"\n    />\n\n    <div class=\"emptyState\" v-show=\"noQuestions\">\n      <p>Aww... aun no has preguntado nada aún</p>\n      <h2>¡Haz tu primera pregunta!</h2>\n      <router-link class=\"button\" :to=\"{ name: 'NewQuestion' }\">Hacer pregunta</router-link>\n    </div>\n  </div>\n</template>\n\n<script>\n//STORAGE DE LOS DATOS DE USUARIO\nimport userData from \"@/dataStorage/userData\";\nimport axios from \"axios\";\nimport api from \"@/api/api.js\";\n\nimport getquestions from \"@/components/GetQuestions.vue\";\n\nimport {\n  getAuthToken,\n  getIdToken,\n  alertFunction,\n  config,\n  ENDPOINT,\n} from \"../utils/helpers\";\n\nexport default {\n  name: \"UserQuestions\",\n  components: {\n    getquestions,\n  },\n  data() {\n    return {\n      questions: [],\n      answers: [],\n      noQuestions: false,\n\n      //variables de gestion de errores\n      showError: false,\n      errorMessage: \"\",\n\n      sharedStore: userData.state,\n    };\n  },\n\n  computed: {\n    token() {\n      return this.sharedStore.token;\n    },\n    route() {\n      return this.$route.name;\n    },\n  },\n  methods: {\n    //TRAER LAS PREGUNTAS QUE HA HECHO EL USUARIO DESDE LA BBDD\n    async getQuestionsAnwer() {\n      try {\n        const response = await api.userQuestions();\n        this.questions = response;\n\n        if (this.questions.length === 0) {\n          this.noQuestions = true;\n        }\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error;\n      }\n    },\n    //TRAER LAS RESPUESTA DE LA PREGUNTA SELECCIONADA SI ES USUARIO LOGUEADO\n    async getAnswersById(idQuestion) {\n      try {\n        const response = await api.getAnswers(idQuestion);\n        this.answers = response;\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error;\n      }\n    },\n    //VOTAR UNA RESPUESTA\n    async rateAnswer(data) {\n      try {\n        const response = await api.postRating(data);\n\n        alertFunction(\n          \"success\",\n          \"Ranking\",\n          `¡Has Votado con ${data.rating} puntos!`\n        );\n      } catch (error) {\n        await alertFunction(\"error\", \"Opss!\", `Ya has votado esta respuesta`);\n      }\n    },\n\n    async getQuestionData(id) {\n      this.hideQuestion = true;\n\n      try {\n        const response = await axios.get(ENDPOINT + \"/question/\" + id, {\n          headers: {\n            Authorization: this.token,\n          },\n        });\n\n        this.title = response.data.data.title;\n        this.content = response.data.data.question_text;\n        this.idQuestion = id;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    questionEdited() {\n      //ALERT DE EDITAR\n      alertFunction(\n        \"success\",\n        \"Actualizado\",\n        `Has editado tu pregunta exitosamente`\n      );\n      this.getQuestionsAnwer();\n    },\n    questionDeleted() {\n      alertFunction(\"success\", \"Borrada!\", \"Tu pregunta ha sido borrada.\");\n      this.getQuestionsAnwer();\n    },\n  },\n  created() {\n    this.getQuestionsAnwer();\n  },\n};\n</script>\n\n<style scoped>\n* {\n  text-align: left;\n  margin-bottom: 1rem;\n}\n</style>\n"]}]}