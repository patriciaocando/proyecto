{"remainingRequest":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/DashboardView.vue?vue&type=style&index=0&id=cabbb9e2&scoped=true&lang=css&","dependencies":[{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/DashboardView.vue","mtime":1599158125245},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm1haW5WaWV3IGgzIHsKICBtYXJnaW4tdG9wOiAycmVtOwp9CgouZGFzaEhvbWVDb250ZW50IHsKICBtYXJnaW46IDFyZW07CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbjsKfQojc2VhcmNoQ29udGFpbmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWd0aEJsdWUpOwogIGJvcmRlci1yYWRpdXM6IDFyZW07CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGZsZXgtd3JhcDogd3JhcDsKICBtYXJnaW4tYm90dG9tOiAycmVtOwogIHBhZGRpbmc6IDJyZW07Cn0KCiNzZWFyY2hDb250YWluZXIgaDEgewogIHRleHQtYWxpZ246IGxlZnQ7CiAgbWFyZ2luLWJvdHRvbTogMnJlbTsKfQoKQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkgewogICNzZWFyY2hDb250YWluZXIgewogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGlndGhCbHVlKTsKICAgIGJvcmRlci1yYWRpdXM6IDFyZW07CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIGZsZXgtd3JhcDogd3JhcDsKICAgIG1hcmdpbi1ib3R0b206IDJyZW07CiAgfQp9CkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIwMHB4KSB7CiAgI3NlYXJjaENvbnRhaW5lciB7CiAgICBtYXJnaW4tYm90dG9tOiAycmVtOwogIH0KICAuZGFzaEhvbWVDb250ZW50IHsKICAgIG1hcmdpbjogMnJlbTsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OwogICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7CiAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0OwogIH0KCiAgI3NlYXJjaENvbnRhaW5lciB7CiAgICBwYWRkaW5nOiAycmVtOwogIH0KCiAgaDMsCiAgI3NlYXJjaENvbnRhaW5lciBoMSB7CiAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgbWFyZ2luOiAwLjVyZW0gMDsKICB9Cn0K"},{"version":3,"sources":["DashboardView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiUA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"DashboardView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <!--ELEMENTOS COMUNES-->\n  <div class=\"container\">\n    <!--COMPONENTE DE BUSQUEDA-->\n    <div id=\"searchContainer\" v-show=\"searchBar\">\n      <h3>BIENVENIDO</h3>\n      <h1>Encuentra todas las respuestas que necesitas</h1>\n      <searchcomponent\n        @queryParams=\"collectParams\"\n        :languages=\"languages\"\n        :newSearchData=\"newSearchData\"\n        @newSearch=\"newSearch\"\n      />\n    </div>\n    <!--GESTION DE ERRORES-->\n    <p v-show=\"showError\">{{ errorMessage }}</p>\n    <!--MOSTRAR LOS RESULTADOS DE LA BUSQUEDA-->\n\n    <!-- <div class=\"emptyState\" v-show=\"noQuestions\">\n      <p>Aww... aun no has preguntado nada aún</p>\n      <h2>¡Haz tu primera pregunta!</h2>\n      <router-link class=\"button\" :to=\"{ name: 'NewQuestion' }\"\n        >Hacer pregunta</router-link\n      >\n    </div>-->\n\n    <div v-show=\"showResultSearch\">\n      <h3>RESULTADOS DE TU BÚSQUEDA:</h3>\n      <getquestions\n        :questions=\"questionsResultSearch\"\n        :answers=\"answers\"\n        @showAnswers=\"getAnswersById\"\n      />\n    </div>\n\n    <div v-show=\"!showResultSearch\" class=\"mainView\">\n      <h3 v-show=\"allQuestions\">{{ mesage }}</h3>\n\n      <!--VISTA EXPERTO-->\n      <showquestionstoexpert\n        v-if=\"role === 'experto'\"\n        v-show=\"allQuestions\"\n        :questions=\"questionsToExpert\"\n      />\n      <!--  @getQuestion=\"getQuestion\" -->\n      <answerquestion\n        v-show=\"!allQuestions\"\n        :question=\"question\"\n        @publishAnswer=\"publishAnswer\"\n        @cancelEdition=\"cancelEditAnswer\"\n      />\n\n      <!--VISTA ESTUDIANTE-->\n\n      <div>\n        <getquestions\n          v-if=\"role === 'estudiante'\"\n          :questions=\"studentQuestions\"\n          :answers=\"answers\"\n          @showAnswers=\"getAnswersById\"\n          @newVote=\"newVote\"\n        />\n        <div class=\"emptyState\" v-show=\"noQuestions\">\n          <h2>¡Haz tu primera pregunta!</h2>\n          <router-link class=\"button\" :to=\"{ name: 'NewQuestion' }\">Hacer pregunta</router-link>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n//COMPONENTES DE BUSQUEDA\nimport searchcomponent from \"@/components/SearchComponent.vue\";\nimport getquestions from \"@/components/GetQuestions.vue\";\n//COMPONENTES PARA EXPERTO\nimport answerquestion from \"@/components/AnswerQuestion.vue\";\nimport showquestionstoexpert from \"@/components/GetQuestionsToExpert.vue\";\n\n///////////\nimport userquestions from \"@/views/UserQuestions.vue\";\n\n//IMPORTAR UTILIDADES\nimport axios from \"axios\";\nimport {\n  getAuthToken,\n  getRoleToken,\n  getIdToken,\n  alertFunction,\n  config,\n  ENDPOINT,\n} from \"../utils/helpers\";\n\n//STORAGE DE LOS DATOS DE USUARIO\nimport userData from \"@/dataStorage/userData\";\nimport api from \"@/api/api.js\";\n\nexport default {\n  name: \"DashboardView\",\n  components: {\n    getquestions,\n    searchcomponent,\n    showquestionstoexpert,\n    answerquestion,\n    /////////////\n    userquestions,\n  },\n  data() {\n    return {\n      //store del usuario\n      sharedStore: userData.state,\n      //mensaje de actividad reciente\n      mesage: \"\",\n\n      //ocultar barra de busqueda\n      searchBar: true,\n\n      newSearchData: {},\n      searchMessage: false,\n\n      //Variable para interpolar los lenguajes en la busqueda\n      languages: [],\n\n      answers: [],\n\n      //Variable estudiante\n      studentQuestions: [],\n      studentAnswers: [],\n      showQuestion: true,\n      noQuestions: false,\n      count: \"\",\n\n      //CONTENIDO PARA EDITAR PREGUNTA\n      newTitle: \"\",\n      newContent: \"\",\n      question: [],\n      questionsToExpert: [],\n      allQuestions: true,\n\n      //Variables resultado de la busqueda\n      showResultSearch: false,\n      questionsResultSearch: [],\n\n      //variables de gestion de errores\n      showError: false,\n      errorMessage: \"\",\n      /* //TOKEN\n      token: \"\", */\n    };\n  },\n  computed: {\n    role() {\n      return this.sharedStore.role;\n    },\n    token() {\n      return this.sharedStore.token;\n    },\n    route() {\n      return this.$route.name;\n    },\n  },\n\n  methods: {\n    cancelEditAnswer() {\n      this.allQuestions = true;\n      this.searchBar = true;\n    },\n    newSearch() {\n      this.isResult = false;\n      this.searchMessage = false;\n      this.showResultSearch = false;\n      this.getRole();\n    },\n    //////////////////////////////////////////////////////\n    //ENPOINTS GENERALES\n    //OBTENGO EL ROL PARA SABER QUE LE VA A MOSTRAR AL USUARIO SEGUN SU ROL\n    getRole() {\n      if (this.role === \"estudiante\") {\n        this.mesage = \"ACTIVIDAD RECIENTE\";\n        this.getStudentQuestions();\n      } else if (this.role === \"experto\") {\n        this.mesage = \"PREGUNTAS PARA RESPONDER\";\n        this.getQuestionsToAnswer();\n      } else {\n        console.log(\"carga funcion de admin\");\n      }\n    },\n    newVote(data) {\n      alertFunction(\n        \"success\",\n        \"Ranking\",\n        `¡Has Votado con ${data.rating} puntos!`\n      );\n      /* this.getAnswersById(data.id);\n      console.log(\"me ejecuto\"); */\n    },\n    //RECIBO LOS PARAMETROS DE BUSQUEDA DESDE MI COMPONENTE\n    collectParams(componentParams) {\n      this.showQuestion = false;\n      this.getQuestions(componentParams);\n    },\n    async getQuestions(componentParams) {\n      try {\n        let response = await api.getQuestions(componentParams);\n\n        this.searchMessage = false;\n        this.showResultSearch = true;\n        this.questionsResultSearch = response;\n\n        await this.getLanguages();\n      } catch (error) {\n        this.newSearchData = {\n          response: \"No hay resultados que coincidan con tu búsqueda\",\n          newSearchView: true,\n        };\n        this.isResult = false;\n      }\n    },\n    //TRAER LOS LENGUAJES DE LA BBDD PARA EL SELECTOR DE LA BUSQUEDA AVANZADA\n    async getLanguages() {\n      try {\n        this.languages = await api.getLanguages();\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error;\n      }\n    },\n    //////////////////////////////////////////////////////\n    //ENPOINTS PARA ESTUDIANTE\n\n    //LAS PREGUNTAS QUE HA HECHO EL ESTUDIANTE RECIENTEMENTE\n    async getStudentQuestions() {\n      try {\n        const response = await api.userQuestions();\n        this.studentQuestions = response;\n\n        if (this.studentQuestions.length === 0) {\n          this.noQuestions = true;\n        }\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error;\n      }\n    },\n    //TRAER LAS RESPUESTA DE LA PREGUNTA SELECCIONADA SI ES USUARIO LOGUEADO\n    async getAnswersById(idQuestion) {\n      try {\n        this.answers = await api.getAnswers(idQuestion);\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error;\n      }\n    },\n    //////////////////////////////////////////////////////\n    //ENPOINTS PARA EXPERTO\n    //TRAIGO LAS PREGUNTAS QUE PUEDE RESPONDER EL EXPERTO\n    async getQuestionsToAnswer() {\n      try {\n        const response = await api.questionsToAnswer();\n        this.questionsToExpert = response;\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error;\n      }\n    },\n    /*   async getQuestion(id) {\n      this.searchBar = false;\n      try {\n        const response = await axios.get(ENDPOINT + \"/question/\" + id, {\n          headers: {\n            Authorization: this.token,\n          },\n        });\n        this.question.push(response.data.data);\n        this.allQuestions = false;\n        this.idQuestion = id;\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error.response.data.message;\n      }\n    }, */\n    async publishAnswer(data) {\n      try {\n        const response = await axios.post(\n          ENDPOINT + \"/new-answer/\" + this.idQuestion,\n          data,\n          {\n            headers: {\n              Authorization: this.token,\n            },\n          }\n        );\n        alertFunction(\n          \"success\",\n          \"HAS RESPONDIDO\",\n          \"Tu respuesta se ha publicado correctamente\"\n        );\n        this.$router.push({ name: \"UserQuestions\" });\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error.response.data.message;\n      }\n    },\n    async getAnswersById(idQuestion) {\n      try {\n        this.answers = await api.getAnswers(idQuestion);\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error;\n      }\n    },\n  },\n  created() {\n    this.getRole();\n    this.getLanguages();\n    //this.getStudentQuestions();\n  },\n};\n</script>\n\n<style scoped>\n.mainView h3 {\n  margin-top: 2rem;\n}\n\n.dashHomeContent {\n  margin: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  align-content: space-between;\n}\n#searchContainer {\n  background-color: var(--ligthBlue);\n  border-radius: 1rem;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  margin-bottom: 2rem;\n  padding: 2rem;\n}\n\n#searchContainer h1 {\n  text-align: left;\n  margin-bottom: 2rem;\n}\n\n@media only screen and (min-width: 600px) {\n  #searchContainer {\n    background-color: var(--ligthBlue);\n    border-radius: 1rem;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    margin-bottom: 2rem;\n  }\n}\n@media only screen and (min-width: 1200px) {\n  #searchContainer {\n    margin-bottom: 2rem;\n  }\n  .dashHomeContent {\n    margin: 2rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n    align-content: flex-start;\n  }\n\n  #searchContainer {\n    padding: 2rem;\n  }\n\n  h3,\n  #searchContainer h1 {\n    text-align: left;\n    margin: 0.5rem 0;\n  }\n}\n</style>\n"]}]}