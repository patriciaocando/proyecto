{"remainingRequest":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/babel-loader/lib/index.js!/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/api/api.js","dependencies":[{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/api/api.js","mtime":1599153596171},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/api/api.js"],"names":["axios","jwt","ENDPOINT","authInstance","create","baseURL","headers","Authorization","localStorage","getItem","login","email","password","post","then","response","setAuthToken","data","catch","error","message","token","defaults","common","getAuthToken","logout","removeItem","getUserTokenId","encodedToken","id","role","getUserProfile","get","dataUser","newUser","updateUserProfile","formData","put","updateUserpass","getAllExperts","getLanguages","expertRequest","languages","newLanguageExpert","languageId","newlanguage","getQuestions","queryParams","params","userQuestions","newQuestion","editQuestion","idQuestion","deleteQuestion","delete","questionsToAnswer","postRating","console","log","rating","getAnswers"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport jwt from \"jwt-decode\";\n\nexport const ENDPOINT = \"http://localhost:3000\";\n\n//instancia\nconst authInstance = axios.create({\n  baseURL: ENDPOINT,\n  headers: {\n    Authorization: localStorage.getItem(\"AUTH_TOKEN_KET\"),\n  },\n});\n\nexport default {\n  ///////////////*  USUARIOS  *//////////////////////\n  login: function(email, password) {\n    return axios\n      .post(ENDPOINT + \"/users/login\", {\n        email,\n        password,\n      })\n      .then((response) => {\n        this.setAuthToken(response.data.data);\n        return response.data.data;\n      })\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n  },\n  setAuthToken: function(token) {\n    authInstance.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  },\n  getAuthToken: () => {\n    return localStorage.getItem(\"AUTH_TOKEN_KET\");\n  },\n  logout: () => {\n    delete authInstance.defaults.headers.common[\"Authorization\"];\n    localStorage.removeItem(\"AUTH_TOKEN_KET\");\n  },\n  getUserTokenId: (encodedToken) => {\n    let token = jwt(encodedToken);\n\n    if (!token.id && !token.role) {\n      return null;\n    } else {\n      return {\n        id: token.id,\n        role: token.role,\n      };\n    }\n  },\n  //TRAER LA INFO DEL USUARIO\n  getUserProfile: async function(id) {\n    const dataUser = await authInstance\n      .get(\"/users/profile/\" + id)\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return dataUser.data.data;\n  },\n  //REGISTRAR USUARIO\n  newUser: async function(data) {\n    const response = await axios\n      .post(ENDPOINT + \"/new-user\", data)\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return response.data;\n  },\n  //ACTUALIZAR PERFIL DE USUARIO\n  updateUserProfile: async function(id, formData) {\n    const response = await authInstance\n      .put(\"/users/edit-profile/\" + id, formData)\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n  },\n  //ACTUALIZAR CONTRASEÑA DE USUARIO\n  updateUserpass: async function(id, data) {\n    await authInstance.post(`/users/${id}/password`, data).catch((error) => {\n      throw error.response.data.message;\n    });\n  },\n  ///////////////*  EXPERTOS  *//////////////////////\n  getAllExperts: async function() {\n    const response = await authInstance.get(\"/experts\").catch((error) => {\n      throw error.response.data.message;\n    });\n    return response.data.data;\n  },\n\n  ///////////////*  LENGUAJES  *//////////////////////\n\n  //TRAER LOS LENGUAJES DE LA BBDD PARA EL SELECTOR DE LA BUSQUEDA AVANZADA\n  getLanguages: async function() {\n    const response = await authInstance.get(\"/languages\").catch((error) => {\n      throw error.response.data.message;\n    });\n    return response.data.data;\n  },\n  //ENVIAR SOLICTUD DE EXPERTO AL ADMIN\n  expertRequest: async function(languages) {\n    const response = await authInstance\n      .post(\"/users/upgrade-user\", {\n        languages,\n      })\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return response.data.data;\n  },\n  //ASOCIAR UN NUEVO LENGUAJE\n  newLanguageExpert: async function(languageId) {\n    const response = await authInstance\n      .put(\"/users/add-language\", { newlanguage: languageId })\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return response.data.data;\n  },\n\n  ///////////////*  PREGUNTAS  *//////////////////////\n  //TRAIGO TODAS LAS PREGUNTAS DE LA BBDD\n  getQuestions: async function(queryParams) {\n    const response = await authInstance\n      .get(\"/questions\", {\n        params: queryParams,\n      })\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n\n    return response.data.data;\n  },\n  //PREGUNTAS DE USUARIO\n  userQuestions: async function() {\n    const response = await authInstance.get(\"/my-questions\").catch((error) => {\n      throw error.response.data.message;\n    });\n    return response.data.data;\n  },\n  //NUEVA PREGUNTA\n  newQuestion: async function(data) {\n    const response = await authInstance\n      .post(\"/new-question\", data)\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return response.data.data;\n  },\n  //EDITAR PREGUNTA\n  editQuestion: async function(idQuestion, data) {\n    await authInstance\n      .put(\"/edit-question/\" + idQuestion, data)\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n  },\n  //BORRAR PREGUNTA\n  deleteQuestion: async function(idQuestion) {\n    const response = await authInstance\n      .delete(\"/delete-question/\" + idQuestion)\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return response.data.data;\n  },\n  //PREGUNTAS PARA EXPERTO\n  questionsToAnswer: async function() {\n    const response = await authInstance\n      .get(\"/questions/to-answer\")\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return response.data.data;\n  },\n  ///////////////*  RESPUESTAS  *//////////////////////\n  //RATE ANSWER\n  postRating: async function(data) {\n    console.log(data);\n    const response = await authInstance\n      .post(\"/rating/answer/\" + data.id, {\n        rating: data.rating,\n      })\n      .catch((error) => {\n        console.log(error);\n        throw error.response.data.message;\n      });\n    return response;\n  },\n\n  getAnswers: async function(idQuestion) {\n    const response = await authInstance\n      .get(\"/answer/\" + idQuestion)\n      .catch((error) => {\n        throw error.response.data.message;\n      });\n    return response.data.data;\n  },\n};\n"]}]}