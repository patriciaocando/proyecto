{"remainingRequest":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/babel-loader/lib/index.js!/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/Profile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/src/views/Profile.vue","mtime":1598052366348},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/patricia/hackaboss/PROYECTO/frontend/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Profile.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <!--DATOS DE USUARIO-->\n\n    <userprofile v-on:iduserupdate=\"updateUserData\" :userdata=\"profile\" :cancel=\"deleteError\" />\n    <p v-show=\"showError\">{{ errorMessage }}</p>\n    <!--CAMBIO DE CONTRASEÑA-->\n    <div>\n      <changepassword :actualPassword=\"actualPassword\" v-on:changePassword=\"postNewPassword\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport {\n  getAuthToken,\n  getIdToken,\n  alertFunction,\n  getRoleToken,\n  config,\n  ENDPOINT,\n} from \"../utils/helpers\";\n\nimport userprofile from \"@/components/UserProfile.vue\";\nimport changepassword from \"@/components/ChangePassword.vue\";\n\nexport default {\n  name: \"Profile\",\n  components: {\n    userprofile,\n    changepassword,\n  },\n\n  data() {\n    return {\n      //variables de vista\n      profile: {},\n      userLanguages: [],\n      userRole: \"\",\n      actualPassword: \"\",\n      //variables de gestion de errores\n      showError: false,\n      errorMessage: \"\",\n      userId: \"\",\n\n      //TOKEN\n      token: \"\",\n    };\n  },\n\n  methods: {\n    deleteError() {\n      this.showError = false;\n    },\n    async updateUserData(userData) {\n      let formData = new FormData();\n      //DATOS DEL USUARIO QUE RECIBO DESDE EL COMPONENTE\n      formData.append(\"name\", userData.name);\n      formData.append(\"last_name\", userData.lastname);\n      formData.append(\"username\", userData.username);\n      formData.append(\"email\", userData.email);\n      formData.append(\"profile_bio\", userData.profile);\n      formData.append(\"avatar\", userData.avatar);\n\n      try {\n        const response = await axios.put(\n          ENDPOINT + \"/users/edit-profile/\" + this.userId,\n          formData,\n          {\n            headers: {\n              Authorization: getAuthToken(),\n            },\n          },\n          { header: { \"Content-type\": \"multipart/form-data\" } }\n        );\n        //ALERT DE EDITAR\n        await alertFunction(\n          \"success\",\n          \"Actualizado\",\n          `Has editado los datos de ${userData.username} exitosamente`\n        );\n        location.reload();\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error.response.data.message;\n      }\n    },\n    //TRAIGO LA INFO DEL PERFIL DE USUARIO DE LA BBDD\n    async getUserProfile() {\n      this.token = getAuthToken();\n      try {\n        this.userId = getIdToken(this.token);\n        const response = await axios.get(\n          ENDPOINT + \"/users/profile/\" + this.userId,\n          {\n            headers: {\n              Authorization: getAuthToken(),\n            },\n          }\n        );\n        this.profile = response.data.data;\n        this.profile.avatar = process.env.VUE_APP_STATIC + this.profile.avatar;\n        this.actualPassword = response.data.data.password;\n      } catch (error) {\n        this.showError = true;\n        this.errorMessage = error.response.data.message;\n      }\n    },\n    //CAMBIO DE CONTRASEÑA EN LA BBDD\n    async postNewPassword(data) {\n      try {\n        console.log(data);\n        const response = await axios.post(\n          ENDPOINT + `/users/${this.userId}/password`,\n          data,\n          {\n            headers: {\n              Authorization: getAuthToken(),\n            },\n          }\n        );\n        alertFunction(\n          \"success\",\n          \"NUEVA CONTRASEÑA\",\n          \"Has actualizado tu contaseña con éxito, haz Login de nuevo\"\n        );\n        this.$router.push(\"/login\");\n      } catch (error) {\n        console.log(error);\n        this.showError = true;\n        this.errorMessage = error.response.data.message;\n      }\n    },\n  },\n  created() {\n    this.getUserProfile();\n  },\n};\n</script>\n\n<style scoped></style>\n"],"sourceRoot":"src/views"}]}